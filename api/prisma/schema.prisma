generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model audit {
  id               Int      @id @default(autoincrement()) @db.UnsignedInt
  configuration_id Int?     @db.UnsignedInt
  monitor_id       Int?     @db.UnsignedInt
  server_id        Int?     @db.UnsignedInt
  message          String   @db.VarChar(255)
  created_at       DateTime @default(now()) @db.DateTime(0)
}

model configuration_notification_channels {
  id                      Int                   @id @default(autoincrement()) @db.UnsignedInt
  configuration_id        Int                   @db.UnsignedInt
  notification_channel_id Int                   @db.UnsignedInt
  created_at              DateTime              @default(now()) @db.DateTime(0)
  updated_at              DateTime              @default(now()) @db.DateTime(0)
  configurations          configurations        @relation(fields: [configuration_id], references: [id], onDelete: Cascade, map: "fk_configuration_notification_channels_configuration_id")
  notification_channels   notification_channels @relation(fields: [notification_channel_id], references: [id], onDelete: Cascade, map: "fk_configuration_notification_channels_notification_channel_id")

  @@index([configuration_id], map: "fk_configuration_notification_channels_configuration_id")
  @@index([notification_channel_id], map: "fk_configuration_notification_channels_notification_channel_id")
}

model configurations {
  id                                  Int                                   @id @default(autoincrement()) @db.UnsignedInt
  name                                String                                @db.VarChar(255)
  chain                               String                                @db.VarChar(255)
  is_enabled                          Boolean                               @default(true)
  createdAt                           DateTime                              @db.DateTime(0)
  updatedAt                           DateTime                              @db.DateTime(0)
  configuration_notification_channels configuration_notification_channels[]
  monitors                            monitors[]
  servers                             servers[]
}

model monitors {
  id                   Int            @id @default(autoincrement()) @db.UnsignedInt
  configuration_id     Int            @db.UnsignedInt
  name                 String         @db.VarChar(255)
  type                 String         @db.VarChar(255)
  is_enabled           Boolean        @default(true)
  configuration_object String         @db.VarChar(255)
  createdAt            DateTime       @db.DateTime(0)
  updatedAt            DateTime       @db.DateTime(0)
  server_id            Int?           @db.UnsignedInt
  last_check           DateTime?      @db.DateTime(0)
  status               Boolean        @default(true)
  last_error           String?        @db.VarChar(255)
  configurations       configurations @relation(fields: [configuration_id], references: [id], onDelete: Cascade, map: "fk_monitor_configuration_id")
  servers              servers?       @relation(fields: [server_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "monitors_server_id_foreign_idx")

  @@index([configuration_id], map: "fk_monitor_configuration_id")
  @@index([server_id], map: "monitors_server_id_foreign_idx")
}

model notification_channels {
  id                                  Int                                   @id @default(autoincrement()) @db.UnsignedInt
  name                                String                                @db.VarChar(255)
  type                                String                                @db.VarChar(255)
  configuration_object                String                                @db.VarChar(255)
  is_enabled                          Boolean                               @default(true)
  created_at                          DateTime                              @default(now()) @db.DateTime(0)
  updated_at                          DateTime                              @default(now()) @db.DateTime(0)
  configuration_notification_channels configuration_notification_channels[]
}

model servers {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  configuration_id Int            @db.UnsignedInt
  name             String         @db.VarChar(255)
  address          String         @db.VarChar(255)
  is_enabled       Boolean        @default(true)
  createdAt        DateTime       @db.DateTime(0)
  updatedAt        DateTime       @db.DateTime(0)
  monitors         monitors[]
  configurations   configurations @relation(fields: [configuration_id], references: [id], onDelete: Cascade, map: "fk_server_configuration_id")
  services         services[]

  @@index([configuration_id], map: "fk_server_configuration_id")
}

model services {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  server_id  Int      @db.UnsignedInt
  name       String   @db.VarChar(255)
  type       String   @db.VarChar(255)
  address    String   @db.VarChar(255)
  is_enabled Boolean  @default(true)
  createdAt  DateTime @db.DateTime(0)
  updatedAt  DateTime @db.DateTime(0)
  servers    servers  @relation(fields: [server_id], references: [id], onDelete: Cascade, map: "fk_services_server_id")

  @@index([server_id], map: "fk_services_server_id")
}
